#%RAML 0.8
title: Manageably API
version: v1
baseUri: http://api.manageably.com/{version}
protocols: [HTTP]
mediaType: application/json

documentation:
  - title: Getting Started
    content: !include documentations/getting-started.doc.md

schemas:
  - Project: !include schemas/project.schema.json
  - ProjectList: !include schemas/project-list.schema.json
  - Employee: !include schemas/employee.schema.json
  - EmployeeList: !include schemas/employee-list.schema.json

/projects:
  displayName: Projects
  description: A collection of projects.

  get:
    description: Retrieve a list of projects.
    queryParameters:
      page:
        description: Page number.
        type: integer
      per_page:
        description: Amount of items displayed per page.
        type: integer
    responses:
      200:
        body:
          application/json:
            schema: ProjectList
            example: !include examples/project-list.example.json

  post:
    description: Create a new project.
    body:
      application/json:
        schema: Project
        example: !include examples/project.example.json
    responses:
      201:
        body:
          application/json:
            schema: Project
            example: !include examples/project.example.json

  /{projectId}:
    displayName: Project
    description: A specific project, a member of the projects collection.
    uriParameters:
      projectId:
        displayName: Project ID
        description: The ID of a project.
        type: number

    get:
      description: Retrieve the specified project.
      responses:
        200:
          body:
            application/json:
              schema: Project
              example: !include examples/project.example.json
        404:
          description: Project with specified ID does not exist.

    put:
      description: Update a project.

    delete:
      description: Delete a single project.

/employees:
  displayName: Employees
  description: A collection of employees.

  get:
    description: Retrieve a list of employees.
    responses:
      200:
        body:
          application/json:
            schema: EmployeeList
            example: !include examples/employee-list.example.json

  /{employeeId}:
    displayName: Employee
    description: A specific employee, a member of the employees collection.
    uriParameters:
      employeeId:
        displayName: Employee ID
        description: The ID of an employee.
        type: number

    get:
      description: Retrieve the specified employee.
      responses:
        200:
          body:
            application/json:
              schema: Employee
              example: !include examples/employee.example.json
